@page "/menu-items/register"
@page "/menu-items/register/{Id:int}"
@inherits PageBase
@inject IMenuService MenuService

<PageTitle>@(_isEditing ? "Editar" : "Nuevo") Ítem - Restaurant Management System</PageTitle>

<h1 class="mt-4">@(_isEditing ? "Editar" : "Nuevo") Ítem del Menú</h1>
<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
    <li class="breadcrumb-item"><a href="/menu-items">Ítems del Menú</a></li>
    <li class="breadcrumb-item active">@(_isEditing ? "Editar" : "Nuevo")</li>
</ol>

<div class="row">
    <div class="col-lg-8">
        <div class="card mb-4">
            <div class="card-header">
                <i class="fas fa-utensils me-1"></i>
                Información del Ítem
            </div>
            <div class="card-body">
                <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">Nombre</label>
                                <InputText @bind-Value="_model.Name" class="form-control" />
                                <ValidationMessage For="@(() => _model.Name)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Descripción</label>
                                <InputTextArea @bind-Value="_model.Description" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => _model.Description)" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(_model.ImageUrl))
                                {
                                    <img src="@_model.ImageUrl" alt="@_model.Name" 
                                         class="img-fluid rounded mb-2" style="max-height: 200px;" />
                                }
                                else
                                {
                                    <div class="bg-light rounded d-flex align-items-center justify-content-center mb-2" 
                                         style="height: 200px;">
                                        <i class="fas fa-image fa-3x text-muted"></i>
                                    </div>
                                }
                                <div>
                                    <label class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-upload"></i> Subir Imagen
                                        <InputFile OnChange="OnImageUpload" class="d-none" accept="image/*" />
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Categoría</label>
                            <InputSelect @bind-Value="_model.CategoryId" class="form-select">
                                <option value="">Seleccione una categoría</option>
                                @if (_categories != null)
                                {
                                    @foreach (var category in _categories)
                                    {
                                        <option value="@category.CategoryId">@category.Name</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _model.CategoryId)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Precio</label>
                            <InputNumber @bind-Value="_model.Price" class="form-control" />
                            <ValidationMessage For="@(() => _model.Price)" />
                        </div>
                    </div>

                    @if (_isEditing)
                    {
                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <InputCheckbox @bind-Value="_model.IsAvailable" class="form-check-input" />
                                <label class="form-check-label">Disponible</label>
                            </div>
                        </div>
                    }

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" @onclick="() => NavigateTo("/menu-items")">
                            Cancelar
                        </button>
                        <button type="submit" class="btn btn-primary">
                            @(_isEditing ? "Actualizar" : "Crear")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private bool _isEditing => Id.HasValue;
    private UpdateMenuItemDto _model = new();
    private List<MenuCategoryDto> _categories;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await MenuService.GetAllCategoriesAsync())
            .Where(c => c.IsActive)
            .OrderBy(c => c.DisplayOrder)
            .ToList();

        if (_isEditing)
        {
            var item = await MenuService.GetMenuItemByIdAsync(Id.Value);
            if (item != null)
            {
                _model = new UpdateMenuItemDto
                {
                    MenuItemId = item.MenuItemId,
                    Name = item.Name,
                    Description = item.Description,
                    Price = item.Price,
                    CategoryId = item.CategoryId,
                    ImageUrl = item.ImageUrl,
                    IsAvailable = item.IsAvailable
                };
            }
            else
            {
                NavigateTo("/menu-items");
                await ShowToast("Ítem no encontrado", "error");
            }
        }
    }

    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // TODO: Implementar subida de imagen
                _model.ImageUrl = "/path/to/uploaded/image.jpg";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ShowToast("Error al subir la imagen", "error");
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (_isEditing)
            {
                await MenuService.UpdateMenuItemAsync(_model);
                await ShowToast("Ítem actualizado correctamente");
            }
            else
            {
                var createDto = new CreateMenuItemDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Price = _model.Price,
                    CategoryId = _model.CategoryId,
                    ImageUrl = _model.ImageUrl
                };
                await MenuService.CreateMenuItemAsync(createDto);
                await ShowToast("Ítem creado correctamente");
            }
            NavigateTo("/menu-items");
        }
        catch (Exception ex)
        {
            await ShowToast($"Error al {(_isEditing ? "actualizar" : "crear")} el ítem", "error");
        }
    }
}
