@typeparam TItem
@inherits PageBase

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div>
            <i class="@IconClass"></i>
            @Title
        </div>
        @if (AllowAdd)
        {
            <button class="btn btn-primary btn-sm" @onclick="OnAddClick">
                <i class="fas fa-plus"></i> Nuevo
            </button>
        }
    </div>
    <div class="card-body">
        @if (Items == null)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando...</span>
                </div>
            </div>
        }
        else
        {
            <table id="@TableId" class="table table-bordered table-hover">
                <thead>
                    <tr>
                        @HeaderTemplate
                        @if (AllowActions)
                        {
                            <th>Acciones</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        <tr>
                            @RowTemplate(item)
                            @if (AllowActions)
                            {
                                <td>
                                    @if (AllowEdit)
                                    {
                                        <button class="btn btn-primary btn-sm me-1" @onclick="() => OnEditClick.InvokeAsync(item)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    }
                                    @if (AllowDelete)
                                    {
                                        <button class="btn btn-danger btn-sm" @onclick="() => OnDeleteClick.InvokeAsync(item)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                    @ActionsTemplate(item)
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string IconClass { get; set; } = "fas fa-table";
    [Parameter] public string TableId { get; set; } = "dataTable";
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public bool AllowActions { get; set; } = true;
    [Parameter] public bool AllowAdd { get; set; } = true;
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public bool AllowDelete { get; set; } = true;
    [Parameter] public EventCallback OnAddClick { get; set; }
    [Parameter] public EventCallback<TItem> OnEditClick { get; set; }
    [Parameter] public EventCallback<TItem> OnDeleteClick { get; set; }
    [Parameter] public RenderFragment HeaderTemplate { get; set; }
    [Parameter] public RenderFragment<TItem> RowTemplate { get; set; }
    [Parameter] public RenderFragment<TItem> ActionsTemplate { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeDataTable(TableId);
        }
    }
}
